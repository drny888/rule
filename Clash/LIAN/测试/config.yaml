proxy-providers:
  Airport_01:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    url: "订阅链接1"
  
unified-delay: true
tcp-concurrent: true
global-client-fingerprint: chrome
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  skip-domain:
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"

proxies:
- name: "🟢 直连"
  type: direct
  udp: true

pr: &pr {type: select, proxies: [🚀 节点选择, ♻️ 所有-自动, ♻️ 其他-自动, ♻️ IPv6-自动, ♻️🇭🇰 香港-自动, ♻️🇸🇬 新加坡-自动, ♻️🇯🇵 日本-自动, ♻️🇨🇳 台湾-自动, ♻️🇺🇲 美国-自动, 🌐 所有-手动, REJECT, 🟢 直连]}

proxy-groups:
  - {name: 🚀 节点选择, type: select, proxies: [♻️ 所有-自动, ♻️ 其他-自动, ♻️ IPv6-自动, ♻️🇭🇰 香港-自动, ♻️🇸🇬 新加坡-自动, ♻️🇯🇵 日本-自动, ♻️🇨🇳 台湾-自动, ♻️🇺🇲 美国-自动, 🌐 所有-手动, 🟢 直连]}
  - {name: ✨ AI1, <<: *pr}
  - {name: ✨ AI2, <<: *pr}
  - {name: 👩‍👧‍👦 TikTok, <<: *pr}
  - {name: 🎥 流媒体, <<: *pr}
  - {name: 🌍 国外, <<: *pr}
  - {name: ➡️ 国内, <<: *pr}
  - {name: ♻️ 所有-自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连|拒绝|官网|剩余|到期|异常|2x|3x|4x|5x|10x)).)*$"}
  # - {name: 港台日新韩-自动, type: url-test, include-all: true, tolerance: 60, interval: 150, filter: "(?=.*(广港|广台|广日|广新|广韩|广美|香港|HK|Hong Kong|🇭🇰|HongKong|台湾|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|新加坡|SG|坡|狮城|🇸🇬|Singapore|韩国|KR|首尔|春川|🇰🇷|Korea))^((?!(美|官网|家宽|游戏|剩余|到期|异常|流量|2.0|2倍|2x|3.0|3倍|3x|4.0|4倍|4x|5x)).)*$"}
  # - {name: 台日新韩-自动, type: url-test, include-all: true, tolerance: 60, interval: 150, filter: "(?=.*(广台|广日|广新|广韩|广美|台湾|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|新加坡|SG|坡|狮城|🇸🇬|Singapore|韩国|KR|首尔|春川|🇰🇷|Korea))^((?!(官网|游戏|剩余|到期|异常|流量|2.0|2倍|2x|3.0|3倍|3x|4.0|4倍|4x|5x)).)*$"}
  - {name: ♻️🇭🇰 香港-自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美|官网|剩余|到期|异常|2x|3x|4x|5x)).)*$"}
  - {name: ♻️🇨🇳 台湾-自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan))^((?!(港|日|韩|新|美|官网|剩余|到期|异常|2x|3x|4x|5x)).)*$" }
  - {name: ♻️🇯🇵 日本-自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美|官网|剩余|到期|异常|2x|3x|4x|5x)).)*$" }
  - {name: ♻️🇸🇬 新加坡-自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore))^((?!(台|日|韩|港|深|美|官网|剩余|到期|异常|2x|3x|4x|5x)).)*$"}
  # - {name: 韩国-自动`url-test`(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)`http://www.gstatic.com/generate_204`60,150
  - {name: ♻️🇺🇲 美国-自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新|官网|剩余|到期|异常|2x|3x|4x|5x)).)*$"}
  - {name: ♻️ 其他-自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(韩|波|柬|斯|尼|也|克|比|尔|立|冰|秘|耳|利|埃|希|斯|孟|芬|阿|愛|澳|英|德|南|意|法|拿|墨|印|越|俄|瑞|智|荷|比|巴|沙|班|泰|德|烏|以|Australia|Konghwaguk))^((?!(直连|拒绝|官网|剩余|到期|异常|2x|3x|4x|5x|10x)).)*$"}
  - {name: ♻️ IPv6-自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(ipv6|IPV6|IPv6))^((?!(直连|拒绝|官网|剩余|到期|异常|2x|3x|4x|5x|10x)).)*$"}
  # - {name: 📹 YouTube, <<: *pr}
  # - {name: 🍀 Google, <<: *pr}
  # - {name: 🤖 ChatGPT, <<: *pr}
  # - {name: 👨🏿‍💻 GitHub, <<: *pr}
  # - {name: 🐬 OneDrive, <<: *pr}
  # - {name: 🪟 Microsoft, <<: *pr}
  # - {name: 🎵 TikTok, <<: *pr}
  # - {name: 📲 Telegram, <<: *pr}
  # - {name: 🎥 NETFLIX, <<: *pr}
  # - {name: ✈️ Speedtest, <<: *pr}
  # - {name: 💶 PayPal, <<: *pr}
  # - {name: 🍎 Apple, type: select, proxies: [🟢 直连, 🚀 节点选择]}
  # - {name: 🎯 全球直连, type: select, proxies: [🟢 直连, 🚀 节点选择]}
  # - {name: 🐟 漏网之鱼, <<: *pr}
  # - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  # - {name: 🇸🇬 新加坡节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|SG|Singapore"}
  # - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan"}
  # - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|us|unitedstates|united states"}
  # - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  # - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  # - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  # - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  # - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  # - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 🌐 所有-手动, type: select, include-all: true}
rules:
  - RULE-SET,AI1,✨ AI1
  - RULE-SET,AI2,✨ AI2
  - RULE-SET,TikTok,👩‍👧‍👦 TikTok
  - RULE-SET,HBO,🎥 流媒体
  - RULE-SET,YouTube,🎥 流媒体
  - RULE-SET,Disney,🎥 流媒体
  - RULE-SET,Netflix,🎥 流媒体
  - RULE-SET,Spotify,🎥 流媒体
  - RULE-SET,Proxy,🌍 国外
  - RULE-SET,Global,🌍 国外
  - MATCH,➡️ 国内
  # - RULE-SET,private_domain,🟢 直连
  # - RULE-SET,direct1,🟢 直连
  # - RULE-SET,apple_domain,🍎 Apple
  # - RULE-SET,proxylite,🚀 节点选择
  # - RULE-SET,ai,🤖 ChatGPT
  # - RULE-SET,github_domain,👨🏿‍💻 GitHub
  # - RULE-SET,youtube_domain,📹 YouTube
  # - RULE-SET,google_domain,🍀 Google
  # - RULE-SET,onedrive_domain,🐬 OneDrive
  # - RULE-SET,microsoft_domain,🪟 Microsoft
  # - RULE-SET,tiktok_domain,🎵 TikTok
  # - RULE-SET,speedtest_domain,✈️ Speedtest
  # - RULE-SET,telegram_domain,📲 Telegram
  # - RULE-SET,netflix_domain,🎥 NETFLIX
  # - RULE-SET,paypal_domain,💶 PayPal
  # - RULE-SET,geolocation-!cn,🚀 节点选择
  # - RULE-SET,cn_domain,🎯 全球直连
  # - RULE-SET,google_ip,🍀 Google,no-resolve
  # - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve,no-resolve
  # - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  # - RULE-SET,cn_ip,🎯 全球直连
  # - MATCH,🐟 漏网之鱼
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  qcy: &qcy {type: http, interval: 86400, behavior: domain, format: text}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers:
  AI1: { <<: *class, url: "https://github.sk365.us.kg/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/AI.list" }
  AI2: { <<: *class, url: "https://github.sk365.us.kg/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/AI2.list" }
  TikTok: { <<: *class, url: "https://github.sk365.us.kg/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/TikTok/TikTok.list" }
  HBO: { <<: *class, url: "https://github.sk365.us.kg/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/HBO/HBO.list" }
  YouTube: { <<: *class, url: "https://github.sk365.us.kg/raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.list" }
  Disney: { <<: *class, url: "https://github.sk365.us.kg/raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Disney/Disney.list" }
  Netflix: { <<: *class, url: "https://github.sk365.us.kg/raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix.list" }
  Spotify: { <<: *class, url: "https://github.sk365.us.kg/raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Spotify/Spotify.list" }
  # Direct: { <<: *class, url: "https:///github.sk365.us.kg/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/Direct.list" }
  Proxy: { <<: *class, url: "https://github.sk365.us.kg/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/Proxy.list" }
  Global: { <<: *class, url: "https://github.sk365.us.kg/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Global/Global.list" }
  # ruleset=➡️ 国内,[]FINAL
  # private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
  # direct1: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/master/Direct.list" }
  # proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/master/ProxyLite.list" }
  # ai: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/master/AI.list" }
  # youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  # google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  # github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  # telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  # netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  # paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs" }
  # onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs" }
  # microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  # apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
  # speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  # tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
  # gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
  # geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  # cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }
  # cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  # google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  # telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  # netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }
